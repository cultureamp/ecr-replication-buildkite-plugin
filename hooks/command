#!/usr/bin/env bash
set -euo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/shared.bash
. "${DIR}/../lib/shared.bash"

function log() {
  echo "$1"
}

function error() {
  echo "+++ ❌ ECR Replication plugin error" >&2
  echo "$1" >&2
  exit 1
}

function parse_image_name() {
  local image_name="$1"

  # Extract repository URI and image tag from the full image name
  # Format: AWS_ACCOUNT_ID.dkr.ecr.REGION.amazonaws.com/REPOSITORY_NAME:IMAGE_TAG
  local repository_uri="${image_name%:*}"
  local image_tag="${image_name##*:}"

  # Extract repository name from URI (everything after the first slash)
  local repository_name="${repository_uri#*/}"

  echo "${repository_name}" "${image_tag}"
}

function wait_for_replication() {
  local repository_name="$1"
  local image_tag="$2"
  local wait_time=2
  local max_wait=15

  while true; do
    local status_output
    if ! status_output=$(aws ecr describe-image-replication-status \
      --repository-name "${repository_name}" \
      --image-id imageTag="${image_tag}" \
      --output json 2>&1); then
      error "Failed to describe image replication status: ${status_output}"
    fi

    local replication_statuses
    replication_statuses=$(echo "${status_output}" | jq -r '.replicationStatuses[].status' 2>/dev/null)

    local all_settled=true
    local region_count=0
    local in_progress_count=0
    local complete_count=0
    local failed_count=0

    if [[ -n "${replication_statuses}" ]]; then
      while IFS= read -r status; do
        if [[ -n "${status}" ]]; then
          region_count=$((region_count + 1))
          case "${status}" in
            "COMPLETE")
              complete_count=$((complete_count + 1))
              ;;
            "FAILED")
              failed_count=$((failed_count + 1))
              ;;
            "IN_PROGRESS")
              in_progress_count=$((in_progress_count + 1))
              all_settled=false
              ;;
            *)
              log "⚠️  Unknown replication status: ${status}"
              all_settled=false
              ;;
          esac
        fi
      done <<< "${replication_statuses}"
    fi

    if [[ ${region_count} -eq 0 ]]; then
      error "No replication statuses found for image ${repository_name}:${image_tag}"
    fi

    # Log detailed status breakdown
    log "... replication status: ${complete_count} complete, ${in_progress_count} in progress, ${failed_count} failed (${region_count} total regions)"

    if ${all_settled}; then
      break
    fi

    log "Waiting ${wait_time}s before next check..."
    sleep "${wait_time}"

    # Exponential backoff with max wait time
    if [[ ${wait_time} -lt ${max_wait} ]]; then
      wait_time=$((wait_time * 2))
      if [[ ${wait_time} -gt ${max_wait} ]]; then
        wait_time=${max_wait}
      fi
    fi
  done

  if [[ ${failed_count} -eq 0 ]]; then
    log "✅ All regions have completed replication successfully"
  else
    error "Replication finished with ${failed_count} failed region(s) out of ${region_count} total"
  fi
}

function main() {
  local image_name
  image_name="$(plugin_read_config "IMAGE_NAME")"

  if [[ -z "${image_name}" ]]; then
    error "Missing required parameter: 'image-name'"
  fi

  echo "--- Monitoring ECR replication for image: ${image_name}"

  local repository_name image_tag
  read -r repository_name image_tag <<< "$(parse_image_name "${image_name}")"

  wait_for_replication "${repository_name}" "${image_tag}"
}

main "$@"
